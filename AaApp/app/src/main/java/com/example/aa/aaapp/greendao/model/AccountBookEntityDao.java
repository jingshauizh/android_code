package com.example.aa.aaapp.greendao.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.example.aa.aaapp.greendao.model.AccountBookEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ACCOUNT_BOOK_ENTITY".
*/
public class AccountBookEntityDao extends AbstractDao<AccountBookEntity, Long> {

    public static final String TABLENAME = "ACCOUNT_BOOK_ENTITY";

    /**
     * Properties of entity AccountBookEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property AccountBookId = new Property(0, Long.class, "accountBookId", true, "ACCOUNT_BOOK_ID");
        public final static Property State = new Property(1, String.class, "state", false, "STATE");
        public final static Property IsDefault = new Property(2, int.class, "isDefault", false, "IS_DEFAULT");
        public final static Property CreateDate = new Property(3, java.util.Date.class, "createDate", false, "CREATE_DATE");
    };


    public AccountBookEntityDao(DaoConfig config) {
        super(config);
    }
    
    public AccountBookEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ACCOUNT_BOOK_ENTITY\" (" + //
                "\"ACCOUNT_BOOK_ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: accountBookId
                "\"STATE\" TEXT NOT NULL ," + // 1: state
                "\"IS_DEFAULT\" INTEGER NOT NULL ," + // 2: isDefault
                "\"CREATE_DATE\" INTEGER NOT NULL );"); // 3: createDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ACCOUNT_BOOK_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AccountBookEntity entity) {
        stmt.clearBindings();
 
        Long accountBookId = entity.getAccountBookId();
        if (accountBookId != null) {
            stmt.bindLong(1, accountBookId);
        }
        stmt.bindString(2, entity.getState());
        stmt.bindLong(3, entity.getIsDefault());
        stmt.bindLong(4, entity.getCreateDate().getTime());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public AccountBookEntity readEntity(Cursor cursor, int offset) {
        AccountBookEntity entity = new AccountBookEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // accountBookId
            cursor.getString(offset + 1), // state
            cursor.getInt(offset + 2), // isDefault
            new java.util.Date(cursor.getLong(offset + 3)) // createDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AccountBookEntity entity, int offset) {
        entity.setAccountBookId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setState(cursor.getString(offset + 1));
        entity.setIsDefault(cursor.getInt(offset + 2));
        entity.setCreateDate(new java.util.Date(cursor.getLong(offset + 3)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(AccountBookEntity entity, long rowId) {
        entity.setAccountBookId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(AccountBookEntity entity) {
        if(entity != null) {
            return entity.getAccountBookId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
