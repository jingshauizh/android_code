package com.example.aa.aaapp.greendao.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.example.aa.aaapp.greendao.model.PayoutEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PAYOUT_ENTITY".
*/
public class PayoutEntityDao extends AbstractDao<PayoutEntity, Long> {

    public static final String TABLENAME = "PAYOUT_ENTITY";

    /**
     * Properties of entity PayoutEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property PayoutId = new Property(0, Long.class, "payoutId", true, "PAYOUT_ID");
        public final static Property AccountBookId = new Property(1, int.class, "accountBookId", false, "ACCOUNT_BOOK_ID");
        public final static Property AccountBookName = new Property(2, String.class, "accountBookName", false, "ACCOUNT_BOOK_NAME");
        public final static Property CategoryId = new Property(3, int.class, "categoryId", false, "CATEGORY_ID");
        public final static Property CategoryName = new Property(4, String.class, "categoryName", false, "CATEGORY_NAME");
        public final static Property Path = new Property(5, String.class, "path", false, "PATH");
        public final static Property PayWayId = new Property(6, int.class, "payWayId", false, "PAY_WAY_ID");
        public final static Property PlaceId = new Property(7, int.class, "placeId", false, "PLACE_ID");
        public final static Property Amount = new Property(8, long.class, "amount", false, "AMOUNT");
        public final static Property PayoutDate = new Property(9, java.util.Date.class, "payoutDate", false, "PAYOUT_DATE");
        public final static Property PayoutType = new Property(10, String.class, "payoutType", false, "PAYOUT_TYPE");
        public final static Property PayoutUserId = new Property(11, int.class, "payoutUserId", false, "PAYOUT_USER_ID");
        public final static Property Comment = new Property(12, String.class, "comment", false, "COMMENT");
        public final static Property CreateDate = new Property(13, java.util.Date.class, "createDate", false, "CREATE_DATE");
        public final static Property State = new Property(14, int.class, "state", false, "STATE");
    };


    public PayoutEntityDao(DaoConfig config) {
        super(config);
    }
    
    public PayoutEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PAYOUT_ENTITY\" (" + //
                "\"PAYOUT_ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: payoutId
                "\"ACCOUNT_BOOK_ID\" INTEGER NOT NULL ," + // 1: accountBookId
                "\"ACCOUNT_BOOK_NAME\" TEXT NOT NULL ," + // 2: accountBookName
                "\"CATEGORY_ID\" INTEGER NOT NULL ," + // 3: categoryId
                "\"CATEGORY_NAME\" TEXT NOT NULL ," + // 4: categoryName
                "\"PATH\" TEXT NOT NULL ," + // 5: path
                "\"PAY_WAY_ID\" INTEGER NOT NULL ," + // 6: payWayId
                "\"PLACE_ID\" INTEGER NOT NULL ," + // 7: placeId
                "\"AMOUNT\" INTEGER NOT NULL ," + // 8: amount
                "\"PAYOUT_DATE\" INTEGER NOT NULL ," + // 9: payoutDate
                "\"PAYOUT_TYPE\" TEXT NOT NULL ," + // 10: payoutType
                "\"PAYOUT_USER_ID\" INTEGER NOT NULL ," + // 11: payoutUserId
                "\"COMMENT\" TEXT NOT NULL ," + // 12: comment
                "\"CREATE_DATE\" INTEGER NOT NULL ," + // 13: createDate
                "\"STATE\" INTEGER NOT NULL );"); // 14: state
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PAYOUT_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PayoutEntity entity) {
        stmt.clearBindings();
 
        Long payoutId = entity.getPayoutId();
        if (payoutId != null) {
            stmt.bindLong(1, payoutId);
        }
        stmt.bindLong(2, entity.getAccountBookId());
        stmt.bindString(3, entity.getAccountBookName());
        stmt.bindLong(4, entity.getCategoryId());
        stmt.bindString(5, entity.getCategoryName());
        stmt.bindString(6, entity.getPath());
        stmt.bindLong(7, entity.getPayWayId());
        stmt.bindLong(8, entity.getPlaceId());
        stmt.bindLong(9, entity.getAmount());
        stmt.bindLong(10, entity.getPayoutDate().getTime());
        stmt.bindString(11, entity.getPayoutType());
        stmt.bindLong(12, entity.getPayoutUserId());
        stmt.bindString(13, entity.getComment());
        stmt.bindLong(14, entity.getCreateDate().getTime());
        stmt.bindLong(15, entity.getState());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PayoutEntity readEntity(Cursor cursor, int offset) {
        PayoutEntity entity = new PayoutEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // payoutId
            cursor.getInt(offset + 1), // accountBookId
            cursor.getString(offset + 2), // accountBookName
            cursor.getInt(offset + 3), // categoryId
            cursor.getString(offset + 4), // categoryName
            cursor.getString(offset + 5), // path
            cursor.getInt(offset + 6), // payWayId
            cursor.getInt(offset + 7), // placeId
            cursor.getLong(offset + 8), // amount
            new java.util.Date(cursor.getLong(offset + 9)), // payoutDate
            cursor.getString(offset + 10), // payoutType
            cursor.getInt(offset + 11), // payoutUserId
            cursor.getString(offset + 12), // comment
            new java.util.Date(cursor.getLong(offset + 13)), // createDate
            cursor.getInt(offset + 14) // state
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PayoutEntity entity, int offset) {
        entity.setPayoutId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAccountBookId(cursor.getInt(offset + 1));
        entity.setAccountBookName(cursor.getString(offset + 2));
        entity.setCategoryId(cursor.getInt(offset + 3));
        entity.setCategoryName(cursor.getString(offset + 4));
        entity.setPath(cursor.getString(offset + 5));
        entity.setPayWayId(cursor.getInt(offset + 6));
        entity.setPlaceId(cursor.getInt(offset + 7));
        entity.setAmount(cursor.getLong(offset + 8));
        entity.setPayoutDate(new java.util.Date(cursor.getLong(offset + 9)));
        entity.setPayoutType(cursor.getString(offset + 10));
        entity.setPayoutUserId(cursor.getInt(offset + 11));
        entity.setComment(cursor.getString(offset + 12));
        entity.setCreateDate(new java.util.Date(cursor.getLong(offset + 13)));
        entity.setState(cursor.getInt(offset + 14));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PayoutEntity entity, long rowId) {
        entity.setPayoutId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PayoutEntity entity) {
        if(entity != null) {
            return entity.getPayoutId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
