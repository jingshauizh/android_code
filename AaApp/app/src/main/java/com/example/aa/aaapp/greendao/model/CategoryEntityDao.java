package com.example.aa.aaapp.greendao.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.example.aa.aaapp.greendao.model.CategoryEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CATEGORY_ENTITY".
*/
public class CategoryEntityDao extends AbstractDao<CategoryEntity, Void> {

    public static final String TABLENAME = "CATEGORY_ENTITY";

    /**
     * Properties of entity CategoryEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property CategoryId = new Property(0, Integer.class, "categoryId", false, "CATEGORY_ID");
        public final static Property CategoryName = new Property(1, String.class, "categoryName", false, "CATEGORY_NAME");
        public final static Property TypeFlag = new Property(2, int.class, "typeFlag", false, "TYPE_FLAG");
        public final static Property ParentId = new Property(3, int.class, "parentId", false, "PARENT_ID");
        public final static Property Path = new Property(4, String.class, "path", false, "PATH");
        public final static Property State = new Property(5, int.class, "state", false, "STATE");
        public final static Property CreateDate = new Property(6, java.util.Date.class, "createDate", false, "CREATE_DATE");
    };


    public CategoryEntityDao(DaoConfig config) {
        super(config);
    }
    
    public CategoryEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CATEGORY_ENTITY\" (" + //
                "\"CATEGORY_ID\" INTEGER," + // 0: categoryId
                "\"CATEGORY_NAME\" TEXT NOT NULL ," + // 1: categoryName
                "\"TYPE_FLAG\" INTEGER NOT NULL ," + // 2: typeFlag
                "\"PARENT_ID\" INTEGER NOT NULL ," + // 3: parentId
                "\"PATH\" TEXT NOT NULL ," + // 4: path
                "\"STATE\" INTEGER NOT NULL ," + // 5: state
                "\"CREATE_DATE\" INTEGER NOT NULL );"); // 6: createDate
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_CATEGORY_ENTITY_CATEGORY_ID ON CATEGORY_ENTITY" +
                " (\"CATEGORY_ID\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CATEGORY_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CategoryEntity entity) {
        stmt.clearBindings();
 
        Integer categoryId = entity.getCategoryId();
        if (categoryId != null) {
            stmt.bindLong(1, categoryId);
        }
        stmt.bindString(2, entity.getCategoryName());
        stmt.bindLong(3, entity.getTypeFlag());
        stmt.bindLong(4, entity.getParentId());
        stmt.bindString(5, entity.getPath());
        stmt.bindLong(6, entity.getState());
        stmt.bindLong(7, entity.getCreateDate().getTime());
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public CategoryEntity readEntity(Cursor cursor, int offset) {
        CategoryEntity entity = new CategoryEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // categoryId
            cursor.getString(offset + 1), // categoryName
            cursor.getInt(offset + 2), // typeFlag
            cursor.getInt(offset + 3), // parentId
            cursor.getString(offset + 4), // path
            cursor.getInt(offset + 5), // state
            new java.util.Date(cursor.getLong(offset + 6)) // createDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CategoryEntity entity, int offset) {
        entity.setCategoryId(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setCategoryName(cursor.getString(offset + 1));
        entity.setTypeFlag(cursor.getInt(offset + 2));
        entity.setParentId(cursor.getInt(offset + 3));
        entity.setPath(cursor.getString(offset + 4));
        entity.setState(cursor.getInt(offset + 5));
        entity.setCreateDate(new java.util.Date(cursor.getLong(offset + 6)));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(CategoryEntity entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(CategoryEntity entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
